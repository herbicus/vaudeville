// -------------------------------------
//   Utilities
// -------------------------------------
// ----- Placeholders, Extends, Mixins, and Functions
// -------------------------------------

// -------------------------------------
//   Placeholders
// -------------------------------------

// Image Replacement
%ir {
  background-color: transparent;
  border: 0;
  overflow: hidden;
  /* IE 6/7 fallback */
  *text-indent: -9999px;
}

%ir:before {
  content: "";
  display: block;
  width: 0;
  height: 150%;
}

// Clearfix
.clearfix:before,
.clearfix:after {
  content: " "; 
  display: table;
}

.clearfix:after {
  clear: both;
}

.clearfix {
  *zoom: 1;
}

%clearfix:before,
%clearfix:after {
  // The space content is one way to avoid an Opera bug when the contenteditable attribute is included anywhere else in the document. Otherwise it causes space to appear at the top and bottom of elements that receive the `clearfix` class.
  content: " ";
  // The use of `table` rather than `block` is only necessary if using :before to contain the top-margins of child elements.
  display: table;
}

%clearfix:after {
  clear: both;
}

%clearfix {
  // For IE 6/7 only - Include this rule to trigger hasLayout and contain floats
  *zoom: 1;
}

// -------------------------------------
//   Mixins
// -------------------------------------

@mixin shadow-border($color) {
  -webkit-box-shadow: 0px 0px 1px 1px $color, 0px 0px 3px 3px rgba(0, 0, 0, 0.5);
          box-shadow: 0px 0px 1px 1px $color, 0px 0px 3px 3px rgba(0, 0, 0, 0.5);
}

@mixin fade-callout($value, $color, $font-color){
   background: rgba(0, 0, 0, $value);
  -webkit-box-shadow: 0px 0px 1px 1px $color, 0px 0px 3px 3px rgba(0, 0, 0, 0.5);
          box-shadow: 0px 0px 1px 1px $color, 0px 0px 3px 3px rgba(0, 0, 0, 0.5);
    color: $font-color;
}


@mixin bg-contain {
  background-position: center, center;
  background-repeat: no-repeat;
  -webkit-background-size: contain;
       -o-background-size: contain;
          background-size: contain;
}

@mixin bg-cover {
  background-position: center, center;
  background-repeat: no-repeat;
  -webkit-background-size: cover;
       -o-background-size: cover;
          background-size: cover;
}

// Generic Hover States
@mixin grayscale-hover {
  @include transition (all .3s ease-in-out);
  &:hover {
    cursor: pointer;
    -webkit-filter: grayscale(100%);
       -moz-filter: grayscale(100%);
        -ms-filter: grayscale(100%);
         -o-filter: grayscale(100%);
            filter: grayscale(100%);
  }
}

@mixin fade-hover {
  @include transition (all 0.3s ease-in-out);
  &:hover {
    opacity: 0.5;
    cursor: pointer;
  }
}

@mixin border-hover($color) {
  @include transition (all 0.3s ease-in-out);
    &:hover {
      cursor: pointer;
      -webkit-box-shadow: 0px 0px 1px 1px $color, 0px 0px 3px 3px rgba(0, 0, 0, 0.5);
              box-shadow: 0px 0px 1px 1px $color, 0px 0px 3px 3px rgba(0, 0, 0, 0.5);
    }
}

@mixin pop-hover($value) {
  @include transition (all 0.3s ease-in-out);
    &:hover {
      cursor: pointer;
      @include transform(scale($value));
    }
}

@mixin underline-hover {
   @include transition (all 0.3s ease-in-out);
   display: inline-block;
   padding: 15px 20px;
   position: relative;
   &:after {    
     background: none repeat scroll 0 0 transparent;
     bottom: 0;
     content: "";
     display: block;
     height: 2px;
     left: 50%;
     position: absolute;
     background: #fff;
     @include transition(width 0.3s ease 0s, left 0.3s ease 0s);
     width: 0;
   }
   &:hover:after {
     cursor: pointer;
     width: 100%; 
     left: 0; 
   }
}

@mixin coverer {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
}

@mixin centerer {
    position: absolute;
    top: 50%;
    left: 50%;
    @include transform(translate(-50%, -50%));
}

@mixin word-wrap() {
    word-break:     break-word;
    -webkit-hyphens: auto;
    -moz-hyphens:    auto;
    hyphens:         auto;
}

@mixin ellipsis() {
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
}

@function black($opacity) {
    @return rgba(black, $opacity)
}
@function white($opacity) {
    @return rgba(white, $opacity)
}

// MEDIA QUERY MIXIN

@mixin mq($point) {
  @if $point == desktop {
    @media (min-width: 1280px) { @content; }
  }
  @if $point == laptop {
    @media (min-width: 960px) { @content; }
  }
  @else if $point == tablet {
    @media (min-width: 768px) { @content; }
  }
  @else if $point == android {
    @media (min-width: 480px)  { @content; }
  }
  @else if $point == iphone {
    @media (min-width: 320px)  { @content; }
  }
}

// ----- Adds responsive breakpoints. ----- //
 @mixin breakpoint($width) {
   @media (min-width: $width) {
     @content;
   }
 }

// ----- Adds accessibility pseudo selectors to hover states. ----- //
 @mixin attention() {
    &:hover,
    &:active,
    &:focus {
        @content;
  }
}

// ----- Rem font size mixin with px fallback. ----- //
 @mixin font-size($px-width) {
   font-size: #{$px-width * 10}px;
   font-size: #{$px-width}rem;
}

// ----- Rem line-height mixin with px fallback. ----- //
@mixin line-height($px-height) {
    line-height: #{$px-height * 10}px;
    line-height: #{$px-height}rem;
}

// -------------------------------------
//   Functions
// -------------------------------------


// -------------------------------------
//   Utilities
// -------------------------------------

.pull-left {
	float: left;
}

.pull-right {
	float: right;
}

.text-center {
	text-align: center;
}

.show-me {
	@include shadow-border($brightRed);
}

// vertical divider for <li>
.divider {
    border-bottom: none;
    border-top: none;
    border-right: solid 1px #4e4e4e;
    clear: none;
    height: 2.8125rem;
    width: 0;
}
